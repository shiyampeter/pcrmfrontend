import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Link } from 'react-router-dom';
import { Row, Col, Card, Table } from 'react-bootstrap';
import PageBreadcrumbButton from '@/components/Common/PageBreadcrumbButton';
import { EleFormControl, EleFormSolidCheckbox, EleFormSolidRadio, EleFormToggleButton, } from '@/components/UiElements/Forms/Elements';
const Elements = () => {
    return (_jsxs(_Fragment, { children: [_jsx(PageBreadcrumbButton, { title: "Elements", subName: "Forms", url: 'https://react-bootstrap.netlify.app/docs/forms/overview' }), _jsxs(Row, { className: "g-3 g-md-4", children: [_jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Form Controls" }) }), _jsx(Card.Body, { children: _jsx(EleFormControl, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Solid Checkbox" }) }), _jsx(Card.Body, { children: _jsx(EleFormSolidCheckbox, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Solid Radio" }) }), _jsx(Card.Body, { children: _jsx(EleFormSolidRadio, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Toggle Button" }) }), _jsx(Card.Body, { children: _jsx(EleFormToggleButton, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Options" }) }), _jsxs(Table, { className: "mb-0", responsive: true, children: [_jsx("thead", { children: _jsxs("tr", { children: [_jsx("th", { children: "Reference" }), _jsx("th", { children: "Details" })] }) }), _jsxs("tbody", { children: [_jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Approach" }) }), _jsxs("td", { children: ["Browser default checkboxes and radios are replaced with the help of", ' ', _jsx("code", { children: ".form-check" }), ", a series of classes for both input types that improves the layout and behavior of their HTML elements, that provide greater customization and cross browser consistency. Checkboxes are for selecting one or several options in a list, while radios are for selecting one option from many.", _jsx("br", {}), "Structurally, our ", _jsx("code", { children: "<input>" }), "s and ", _jsx("code", { children: "<label>" }), "s are sibling elements as opposed to an ", _jsx("code", { children: "<input>" }), " within a", ' ', _jsx("code", { children: "<label>" }), ". This is slightly more verbose as you must specify", ' ', _jsx("code", { children: "id" }), " and ", _jsx("code", { children: "for" }), " attributes to relate the", ' ', _jsx("code", { children: "<input>" }), " and ", _jsx("code", { children: "<label>" }), ". We use the sibling selector (", _jsx("code", { children: "~" }), ") for all our ", _jsx("code", { children: "<input>" }), " states, like", ' ', _jsx("code", { children: ":checked" }), " or ", _jsx("code", { children: ":disabled" }), ". When combined with the", ' ', _jsx("code", { children: ".form-check-label" }), " class, we can easily style the text for each item based on the ", _jsx("code", { children: "<input>" }), "'s state."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Indeterminate" }) }), _jsxs("td", { children: ["Checkboxes can utilize the ", _jsx("code", { children: ":indeterminate" }), " pseudo class when manually set via JavaScript (there is no available HTML attribute for specifying it)."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Disabled" }) }), _jsxs("td", { children: ["Add the ", _jsx("code", { children: "disabled" }), " attribute and the associated", ' ', _jsx("code", { children: "<label>" }), "s are automatically styled to match with a lighter color to help indicate the input's state."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Inline" }) }), _jsxs("td", { children: ["Group checkboxes or radios on the same horizontal row by adding", ' ', _jsx("code", { children: ".form-check-inline" }), " to any ", _jsx("code", { children: ".form-check" }), "."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Reverse" }) }), _jsxs("td", { children: ["Put your checkboxes, radios, and switches on the opposite side with the", ' ', _jsx("code", { children: ".form-check-reverse" }), " modifier class."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Without labels" }) }), _jsxs("td", { children: ["Omit the wrapping ", _jsx("code", { children: ".form-check" }), " for checkboxes and radios that have no label text. Remember to still provide some form of accessible name for assistive technologies (for instance, using ", _jsx("code", { children: "aria-label" }), "). See the", ' ', _jsx("code", { children: "forms overview accessibility" }), " section for details."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Toggle buttons" }) }), _jsxs("td", { children: ["Create button-like checkboxes and radio buttons by using ", _jsx("code", { children: ".btn" }), ' ', "styles rather than ", _jsx("code", { children: ".form-check-label" }), " on the", ' ', _jsx("code", { children: "<label>" }), " elements. These toggle buttons can further be grouped in a ", _jsx("code", { children: "button group" }), " if needed."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Documentations" }) }), _jsxs("td", { children: ["Please visit:", ' ', _jsx(Link, { to: "https://react-bootstrap.netlify.app/docs/forms/overview", target: "_blank", rel: "noopener noreferrer", children: "https://react-bootstrap.netlify.app/docs/forms/overview" })] })] })] })] })] }) })] })] }));
};
export default Elements;
