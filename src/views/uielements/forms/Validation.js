import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import PageBreadcrumbButton from '@/components/Common/PageBreadcrumbButton';
import { Row, Col, Card, Table } from 'react-bootstrap';
import { ValidationNativeHTML5, ValidationServerRendered, ValidationTooltips, } from '@/components/UiElements/Forms/Validation';
const Validation = () => {
    return (_jsxs(_Fragment, { children: [_jsx(PageBreadcrumbButton, { title: "Validations", subName: "Forms", url: 'https://react-bootstrap.netlify.app/docs/forms/validation' }), _jsxs(Row, { className: "g-3 g-md-4", children: [_jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Native HTML5" }) }), _jsx(Card.Body, { children: _jsx(ValidationNativeHTML5, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Server Rendered" }) }), _jsx(Card.Body, { children: _jsx(ValidationServerRendered, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Validation Tooltips" }) }), _jsx(Card.Body, { children: _jsx(ValidationTooltips, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Options" }) }), _jsxs(Table, { className: "mb-0", responsive: true, children: [_jsx("thead", { children: _jsxs("tr", { children: [_jsx("th", { children: "Name" }), _jsx("th", { children: "Type" }), _jsx("th", { children: "Default" }), _jsx("th", { children: "Description" })] }) }), _jsxs("tbody", { children: [_jsxs("tr", { children: [_jsx("td", { className: "font-monospace", children: "type " }), _jsx("td", { className: "font-monospace", children: _jsxs("div", { children: [_jsx("code", { children: "'valid'" }), _jsx("span", { children: " | " }), _jsx("code", { children: "'invalid'" })] }) }), _jsx("td", { children: _jsx("code", { children: "'valid'" }) }), _jsx("td", { children: _jsx("span", { children: "Specify whether the feedback is for valid or invalid fields" }) })] }), _jsxs("tr", { children: [_jsx("td", { className: "font-monospace", children: "tooltip " }), _jsx("td", { className: "font-monospace", children: _jsx("div", { children: "bool" }) }), _jsx("td", { children: _jsx("code", { children: "false" }) }), _jsx("td", { children: _jsx("span", { children: "Display feedback as a tooltip." }) })] }), _jsxs("tr", { children: [_jsx("td", { className: "font-monospace", children: "as " }), _jsx("td", { className: "font-monospace", children: _jsx("div", { children: "elementType" }) }), _jsx("td", { children: _jsx("code", { children: "'div'" }) }), _jsx("td", { children: _jsx("span", { children: "You can use a custom element type for this component." }) })] })] })] })] }) })] })] }));
};
export default Validation;
