import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Link } from 'react-router-dom';
import PageBreadcrumb from '@/components/Common/PageBreadcrumb';
import { Row, Col, Card, Table } from 'react-bootstrap';
import { ModalLive, ModalPosition, ModalTheme, ModalUsecase, } from '@/components/UiElements/Base/Modals';
const Modals = () => {
    return (_jsxs(_Fragment, { children: [_jsx(PageBreadcrumb, { title: "Modals", subName: "Base UI" }), _jsxs(Row, { className: "g-3 g-md-4", children: [_jsx(Col, { lg: 6, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Modal Live" }) }), _jsx(Card.Body, { children: _jsx(ModalLive, {}) })] }) }), _jsx(Col, { lg: 6, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Modal Theme" }) }), _jsx(Card.Body, { children: _jsx(ModalTheme, {}) })] }) }), _jsx(Col, { lg: 6, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Modal Usecase" }) }), _jsx(Card.Body, { children: _jsx(ModalUsecase, {}) })] }) }), _jsx(Col, { lg: 6, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Modal Position" }) }), _jsx(Card.Body, { children: _jsx(ModalPosition, {}) })] }) }), _jsx(Col, { sm: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Options" }) }), _jsxs(Table, { className: "mb-0", responsive: true, children: [_jsx("thead", { children: _jsxs("tr", { children: [_jsx("th", { children: "Reference" }), _jsx("th", { children: "Details" })] }) }), _jsxs("tbody", { children: [_jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Modal components" }) }), _jsxs("td", { children: ["Below is a ", _jsx("em", { children: "static" }), " modal example (meaning its", _jsx("code", { children: "position" }), " and ", _jsx("code", { children: "display" }), " have been overridden). Included are the modal header, modal body (required for ", _jsx("code", { children: "padding" }), "), and modal footer (optional). We ask that you include modal headers with dismiss actions whenever possible, or provide another explicit dismiss action."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Live demo" }) }), _jsx("td", { children: "Toggle a working modal demo by clicking the button below. It will slide down and fade in from the top of the page." })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Static backdrop" }) }), _jsx("td", { children: "When backdrop is set to static, the modal will not close when clicking outside of it. Click the button below to try it." })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Scrolling long content " }) }), _jsx("td", { children: "When modals become too long for the user's viewport or device, they scroll independent of the page itself. Try the demo below to see what we mean." })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Vertically centered" }) }), _jsxs("td", { children: ["Add ", _jsx("code", { children: ".modal-dialog-centered" }), " to", _jsx("code", { children: ".modal-dialog" }), " to vertically center the modal."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Tooltips and popovers" }) }), _jsxs("td", { children: [_jsx(Link, { to: "/docs/5.3/components/tooltips/", children: "Tooltips" }), "and", _jsx(Link, { to: "/docs/5.3/components/popovers/", children: "popovers" }), "can be placed within modals as needed. When modals are closed, any tooltips and popovers within are also automatically dismissed."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Toggle between modals" }) }), _jsxs("td", { children: ["Toggle between multiple modals with some clever placement of the", ' ', _jsx("code", { children: "data-bs-target" }), " and", _jsx("code", { children: "data-bs-toggle" }), " attributes. For example, you could toggle a password reset modal from within an already open sign in modal.", _jsx("strong", { children: "Please note multiple modals cannot be open at the same time" }), "\u2014this method simply toggles between two separate modals."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Optional sizes" }) }), _jsxs("td", { children: ["Modals have three optional sizes, available via modifier classes to be placed on a ", _jsx("code", { children: ".modal-dialog" }), ". These sizes kick in at certain breakpoints to avoid horizontal scrollbars on narrower viewports. ", _jsx("br", {}), _jsx("br", {}), _jsxs(Table, { className: "table", responsive: true, children: [_jsx("thead", { children: _jsxs("tr", { children: [_jsx("th", { children: "Size" }), _jsx("th", { children: "Class" }), _jsx("th", { children: "Modal max-width" })] }) }), _jsxs("tbody", { children: [_jsxs("tr", { children: [_jsx("td", { children: "Small" }), _jsx("td", { children: _jsx("code", { children: ".modal-sm" }) }), _jsx("td", { children: _jsx("code", { children: "300px" }) })] }), _jsxs("tr", { children: [_jsx("td", { children: "Default" }), _jsx("td", { children: _jsx("span", { className: "text-body-secondary", children: "None" }) }), _jsx("td", { children: _jsx("code", { children: "500px" }) })] }), _jsxs("tr", { children: [_jsx("td", { children: "Large" }), _jsx("td", { children: _jsx("code", { children: ".modal-lg" }) }), _jsx("td", { children: _jsx("code", { children: "800px" }) })] }), _jsxs("tr", { children: [_jsx("td", { children: "Extra large" }), _jsx("td", { children: _jsx("code", { children: ".modal-xl" }) }), _jsx("td", { children: _jsx("code", { children: "1140px" }) })] })] })] }), "Our default modal without modifier class constitutes the \u201Cmedium\u201D size modal."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Fullscreen Modal" }) }), _jsxs("td", { children: ["Another override is the option to pop up a modal that covers the user viewport, available via modifier classes that are placed on a ", _jsx("code", { children: ".modal-dialog" }), ".", ' ', _jsx("br", {}), _jsx("br", {}), _jsxs(Table, { className: "table", responsive: true, children: [_jsx("thead", { children: _jsxs("tr", { children: [_jsx("th", { children: "Class" }), _jsx("th", { children: "Availability" })] }) }), _jsxs("tbody", { children: [_jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: ".modal-fullscreen" }) }), _jsx("td", { children: "Always" })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: ".modal-fullscreen-sm-down" }) }), _jsx("td", { children: _jsx("code", { children: "576px" }) })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: ".modal-fullscreen-md-down" }) }), _jsx("td", { children: _jsx("code", { children: "768px" }) })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: ".modal-fullscreen-lg-down" }) }), _jsx("td", { children: _jsx("code", { children: "992px" }) })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: ".modal-fullscreen-xl-down" }) }), _jsx("td", { children: _jsx("code", { children: "1200px" }) })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: ".modal-fullscreen-xxl-down" }) }), _jsx("td", { children: _jsx("code", { children: "1400px" }) })] })] })] })] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Themes" }) }), _jsxs("td", { children: ["Use ", _jsx("code", { children: "modal-theme-(color)" }), " by adding class with", _jsx("code", { children: ".modal" }), " class as: theme-color name from colors mapping", ' ', _jsx("code", { children: "$theme-colors" }), "."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Usecase" }) }), _jsx("td", { children: "See the example for best practices." })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Documentations" }) }), _jsxs("td", { children: ["Please visit:", _jsx(Link, { to: "https://react-bootstrap.netlify.app/docs/components/modal", target: "_blank", rel: "noopener noreferrer", children: "https://react-bootstrap.netlify.app/docs/components/modal" })] })] })] })] })] }) })] })] }));
};
export default Modals;
