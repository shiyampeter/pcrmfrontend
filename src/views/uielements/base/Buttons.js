import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Link } from 'react-router-dom';
import PageBreadcrumb from '@/components/Common/PageBreadcrumb';
import { Row, Col, Card, Table } from 'react-bootstrap';
import { ButtonBrandsWithIcon, ButtonDefatult, ButtonGradient, ButtonIconSizing, ButtonIconSolid, ButtonOutline, ButtonSoft, ButtonSoftline, ButtonSofttext, ButtonSolidtext, ButtonWithIcon, ButtonWithIconSoft, ButtonIconBrands, ButtonSizing, } from '@/components/UiElements/Base/Buttons';
const Buttons = () => {
    return (_jsxs(_Fragment, { children: [_jsx(PageBreadcrumb, { title: "Buttons", subName: "Base UI" }), _jsxs(Row, { className: "g-3 g-md-4", children: [_jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Variant" }) }), _jsx(Card.Body, { children: _jsx(ButtonDefatult, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Outline" }) }), _jsx(Card.Body, { children: _jsx(ButtonOutline, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Soft" }) }), _jsx(Card.Body, { children: _jsx(ButtonSoft, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Softline" }) }), _jsx(Card.Body, { children: _jsx(ButtonSoftline, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Solidtext" }) }), _jsx(Card.Body, { children: _jsx(ButtonSolidtext, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Softtext" }) }), _jsx(Card.Body, { children: _jsx(ButtonSofttext, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Gradient" }) }), _jsx(Card.Body, { children: _jsx(ButtonGradient, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "IconSolid" }) }), _jsx(Card.Body, { children: _jsx(ButtonWithIcon, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "withIconSoft" }) }), _jsx(Card.Body, { children: _jsx(ButtonWithIconSoft, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "withIcon" }) }), _jsx(Card.Body, { children: _jsx(ButtonIconSolid, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "iconSizing" }) }), _jsx(Card.Body, { children: _jsx(ButtonIconSizing, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "iconBrands" }) }), _jsx(Card.Body, { children: _jsx(ButtonIconBrands, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "socialBrands" }) }), _jsx(Card.Body, { children: _jsx(ButtonBrandsWithIcon, {}) })] }) }), _jsx(Col, { sm: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Sizings" }) }), _jsx(Card.Body, { children: _jsx(ButtonSizing, {}) })] }) }), _jsx(Col, { sm: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Options" }) }), _jsxs(Table, { className: "mb-0", responsive: true, children: [_jsx("thead", { children: _jsxs("tr", { children: [_jsx("th", { children: "Reference" }), _jsx("th", { children: "Details" })] }) }), _jsxs("tbody", { children: [_jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Buttons" }) }), _jsxs("td", { children: ["Bootstrap has a base ", _jsx("code", { children: ".btn" }), " class that sets up basic styles such as padding and content alignment. By default, ", _jsx("code", { children: ".btn" }), " controls have a transparent border and background color, and lack any explicit focus and hover styles."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Variants" }) }), _jsx("td", { children: "Bootstrap includes several button variants, each serving its own semantic purpose, with a few extras thrown in for more control." })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Outline" }) }), _jsxs("td", { children: ["In need of a button, but not the hefty background colors they bring? Replace the default modifier classes with the ", _jsx("code", { children: ".btn-outline-*" }), " ones to remove all background images and colors on any button."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Sizes" }) }), _jsxs("td", { children: ["Fancy larger or smaller buttons? Add ", _jsx("code", { children: ".btn-lg" }), " or", ' ', _jsx("code", { children: ".btn-sm" }), " for additional sizes."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Group" }) }), _jsxs("td", { children: ["Wrap a series of buttons with ", _jsx("code", { children: ".btn" }), " in ", _jsx("code", { children: ".btn-group" }), "."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Documentations" }) }), _jsxs("td", { children: ["Please visit:", ' ', _jsx(Link, { to: "https://react-bootstrap.netlify.app/docs/components/buttons", target: "_blank", rel: "noopener noreferrer", children: "https://react-bootstrap.netlify.app/docs/components/buttons" })] })] })] })] })] }) })] })] }));
};
export default Buttons;
