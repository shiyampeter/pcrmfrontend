import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Link } from 'react-router-dom';
import PageBreadcrumb from '@/components/Common/PageBreadcrumb';
import { Row, Col, Card, Table } from 'react-bootstrap';
import { CardBackground, CardFlush, CardHover, CardNavigation, CardOverlay, CardSink, CardStretch, } from '@/components/UiElements/Base/Cards';
const Cards = () => {
    return (_jsxs(_Fragment, { children: [_jsx(PageBreadcrumb, { title: "Cards", subName: "Base UI" }), _jsxs(Row, { className: "g-3 g-md-4", children: [_jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Sink" }) }), _jsx(Card.Body, { children: _jsx(CardSink, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Navigation" }) }), _jsx(Card.Body, { children: _jsx(CardNavigation, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Overlay" }) }), _jsx(Card.Body, { children: _jsx(CardOverlay, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Background" }) }), _jsx(Card.Body, { children: _jsx(CardBackground, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Flush" }) }), _jsx(Card.Body, { children: _jsx(CardFlush, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Hover" }) }), _jsx(Card.Body, { children: _jsx(CardHover, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Stretch" }) }), _jsx(Card.Body, { children: _jsx(CardStretch, {}) })] }) }), _jsx(Col, { xs: 12, children: _jsxs(Card, { children: [_jsx(Card.Header, { children: _jsx(Card.Title, { children: "Options" }) }), _jsxs(Table, { className: "mb-0", responsive: true, children: [_jsx("thead", { children: _jsxs("tr", { children: [_jsx("th", { children: "Reference" }), _jsx("th", { children: "Details" })] }) }), _jsxs("tbody", { children: [_jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Card" }) }), _jsx("td", { children: "A card is a flexible and extensible content container. It includes options for headers and footers, a wide variety of content, contextual background colors, and powerful display options. If you're familiar with Bootstrap 3, cards replace our old panels, wells, and thumbnails. Similar functionality to those components is available as modifier classes for cards." })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Titles, text, and links" }) }), _jsxs("td", { children: ["Card titles are used by adding ", _jsx("code", { children: ".card-title" }), " to a", _jsx("code", { children: "<h*>" }), " tag. In the same way, links are added and placed next to each other by adding", _jsx("code", { children: ".card-link" }), " to an ", _jsx("code", { children: "<a>" }), " tag."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Images" }) }), _jsxs("td", { children: [_jsx("code", { children: ".card-img-top" }), " places an image to the top of the card. With", ' ', _jsx("code", { children: ".card-text" }), ", text can be added to the card. Text within", ' ', _jsx("code", { children: ".card-text" }), " can also be styled with the standard HTML tags."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Kitchen Sink" }) }), _jsx("td", { children: "Mix and match multiple content types to create the card you need, or throw everything in there. Shown below are image styles, blocks, text styles, and a list group\u2014all wrapped in a fixed-width card." })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Sizing" }) }), _jsxs("td", { children: ["Cards assume no specific ", _jsx("code", { children: "width" }), " to start, so they'll be 100% wide unless otherwise stated. You can change this as needed with custom CSS, grid classes, grid Sass mixins, or utilities."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Text Alignment " }) }), _jsxs("td", { children: ["You can quickly change the text alignment of any card\u2014in its entirety or specific parts\u2014with our", _jsx("a", { href: "/docs/5.3/utilities/text/#text-alignment", children: "text align classes" }), "."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Navigation" }) }), _jsxs("td", { children: ["Add some navigation to a card's header (or block) with Bootstrap's", _jsx("a", { href: "/docs/5.3/components/navs-tabs/", children: "nav components" }), "."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Overlays" }) }), _jsx("td", { children: "Turn an image into a card background and overlay your card's text. Depending on the image, you may or may not need additional styles or utilities." })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Horizontal" }) }), _jsxs("td", { children: ["Using a combination of grid and utility classes, cards can be made horizontal in a mobile-friendly and responsive way. In the example below, we remove the grid gutters with", _jsx("code", { children: ".g-0" }), " and use ", _jsx("code", { children: ".col-md-*" }), " classes to make the card horizontal at the ", _jsx("code", { children: "md" }), " breakpoint. Further adjustments may be needed depending on your card content."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Background and color" }) }), _jsxs("td", { children: ["Set a ", _jsx("code", { children: "background-color" }), " with contrasting foreground", ' ', _jsx("code", { children: "color" }), " with", _jsxs("a", { href: "/docs/5.3/helpers/color-background/", children: ["our ", _jsx("code", { children: ".text-bg-(color)" }), " helpers"] }), ". Previously it was required to manually pair your choice of", _jsx("a", { href: "/docs/5.3/utilities/colors/", children: _jsx("code", { children: ".text-(color)" }) }), "and", _jsx("a", { href: "/docs/5.3/utilities/background/", children: _jsx("code", { children: ".bg-(color)" }) }), "utilities for styling, which you still may use if you prefer."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Card Groups" }) }), _jsxs("td", { children: ["Use card groups to render cards as a single, attached element with equal width and height columns. Card groups start off stacked and use", ' ', _jsx("code", { children: "display: flex;" }), " to become attached with uniform dimensions starting at the", _jsx("code", { children: "sm" }), " breakpoint."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Grid Cards" }) }), _jsxs("td", { children: ["Use the Bootstrap grid system and its", _jsxs("a", { href: "/docs/5.3/layout/grid/#row-columns", children: [_jsx("code", { children: ".row-cols" }), " classes"] }), "to control how many grid columns (wrapped around your cards) you show per row. For example, here's", _jsx("code", { children: ".row-cols-1" }), " laying out the cards on one column, and", ' ', _jsx("code", { children: ".row-cols-md-2" }), " splitting four cards to equal width across multiple rows, from the medium breakpoint up."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Flush Cards" }) }), _jsxs("td", { children: ["Use ", _jsx("code", { children: ".card-flush" }), " for flush cards."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Hover Cards" }) }), _jsxs("td", { children: ["Use ", _jsx("code", { children: ".card-hover" }), " for hover cards."] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Stretch" }) }), _jsxs("td", { children: ["Use ", _jsx("code", { children: ".card-stretch" }), " for stretch cards. Stretch sizing", ' ', _jsx("code", { children: ".card-stretch-(size)" }), " as:", _jsx("code", { children: "100, 75, 50, 33.33, 25" })] })] }), _jsxs("tr", { children: [_jsx("td", { children: _jsx("code", { children: "Documentations" }) }), _jsxs("td", { children: ["Please visit:", _jsx(Link, { to: "https://react-bootstrap.netlify.app/docs/components/cards", target: "_blank", rel: "noopener noreferrer", children: "https://react-bootstrap.netlify.app/docs/components/cards" })] })] })] })] })] }) })] })] }));
};
export default Cards;
